import React, { useEffect, useState } from 'react';
import {
  Card,
  CardMedia,
  CardContent,
  Typography,
  Grid,
  Box,
  IconButton,
  Button,
  Modal,
  TextField,
  FormControlLabel,
  Checkbox,
  CircularProgress,
  Snackbar,
  Alert,
} from '@mui/material';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Edit as EditIcon, Delete as DeleteIcon, Visibility as VisibilityIcon } from '@mui/icons-material';

// Define the dark theme
const theme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#f29c1e', // Accent color
    },
    background: {
      default: 'black', // Dark background
      paper: '#1c0c02', // Paper background for cards
    },
    text: {
      primary: '#f48d4c', // White text
      secondary: '#bbbbbb', // Lighter text
    },
  },
  typography: {
    h6: {
      fontWeight: 600,
    },
    body1: {
      fontWeight: 400,
    },
  },
});

function Blog() {
  const [blogData, setBlogData] = useState([]);
  const [open, setOpen] = useState(false); // State to control Modal visibility
  const [editingBlog, setEditingBlog] = useState(null); // Blog being edited
  const [formData, setFormData] = useState({
    title: '',
    client_name: '',
    short_desc: '',
    category: '',
    author: '',
    all_data: '',
    banner: '',
    campaign_link: '',
    meta_keyword: '',
    post_data: false,
    trending: false,
  });

  const [loading, setLoading] = useState(false); // Loading state for the PUT request

  // Snackbar state
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success'); // 'success', 'error'

  // Fetch blog data on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('http://api.couponzie.com/api/blogs');
        const data = await response.json();
        setBlogData(data);
      } catch (error) {
        console.error('Error fetching blog data:', error);
      }
    };

    fetchData();
  }, []);

  // Open the modal to edit a blog
  const handleOpenModal = (blog) => {
    setEditingBlog(blog);
    setFormData({
      title: blog.title,
      client_name: blog.client_name,
      short_desc: blog.short_desc,
      category: blog.category,
      author: blog.author,
      all_data: blog.all_data,
      banner: blog.banner,
      campaign_link: blog.campaign_link,
      meta_keyword: blog.meta_keyword.join(', '),
      post_data: blog.post_data,
      trending: blog.trending,
    });
    setOpen(true);
  };

  // Close the modal
  const handleCloseModal = () => {
    setOpen(false);
    setEditingBlog(null);
  };

  // Handle form field changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  // Handle checkbox change for boolean values (post_data, trending)
  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: checked,
    }));
  };

  // Submit the form (PUT request)
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczNjI0MzM0OCwianRpIjoiNzczNzkzZDYtMTI4OC00MjZlLTlkN2EtOGY2ZGY3ODkyOTRjIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InByaXR1bEBmbHloZWFkbWVkaWEuY29tIiwibmJmIjoxNzM2MjQzMzQ4LCJjc3JmIjoiZjExZDhkNzktMzUwZC00Mzc2LTk3ZDAtOWM0ODM0YjhkMjY1IiwiZXhwIjoxNzM2MjQ0MjQ4fQ.2ORZb6Ocf0OfC7Kblsmgdjy9KWDZbtjuUJstvPKH5Wo"

      const response = await fetch(`http://api.couponzie.com/api/blog/${editingBlog._id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          meta_keyword: formData.meta_keyword.split(',').map((keyword) => keyword.trim()),
        }),
      });

      if (response.ok) {
        const updatedBlog = await response.json();
        // Update the blog data in the state
        setBlogData((prevBlogs) =>
          prevBlogs.map((blog) =>
            blog._id === editingBlog._id ? updatedBlog : blog
          )
        );
        showSnackbar('Blog updated successfully', 'success');
        handleCloseModal(); // Close the modal after successful update
      } else {
        showSnackbar('Error updating the blog', 'error');
      }
    } catch (error) {
      console.error('Error updating blog:', error);
      showSnackbar('Error updating the blog', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Handle deleting a blog
  const handleDeleteBlog = async (id) => {
    try {
      const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTczNjI0MzM0OCwianRpIjoiNzczNzkzZDYtMTI4OC00MjZlLTlkN2EtOGY2ZGY3ODkyOTRjIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InByaXR1bEBmbHloZWFkbWVkaWEuY29tIiwibmJmIjoxNzM2MjQzMzQ4LCJjc3JmIjoiZjExZDhkNzktMzUwZC00Mzc2LTk3ZDAtOWM0ODM0YjhkMjY1IiwiZXhwIjoxNzM2MjQ0MjQ4fQ.2ORZb6Ocf0OfC7Kblsmgdjy9KWDZbtjuUJstvPKH5Wo"


      const response = await fetch(`http://api.couponzie.com/api/blog/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        setBlogData((prevBlogs) => prevBlogs.filter((blog) => blog._id !== id));
        showSnackbar('Blog deleted successfully', 'success');
      } else {
        showSnackbar('Error deleting the blog', 'error');
      }
    } catch (error) {
      console.error('Error deleting blog:', error);
      showSnackbar('Error deleting the blog', 'error');
    }
  };

  // Show Snackbar with message
  const showSnackbar = (message, severity = 'success') => {
    setSnackbarMessage(message);
    setSnackbarSeverity(severity);
    setSnackbarOpen(true);
  };

  // Close Snackbar
  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') return;
    setSnackbarOpen(false);
  };

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ paddingRight: '10px', paddingLeft: '10px', maxWidth: '1200px', margin: '50px auto' }}>
        {/* Add New Blog Button */}
   
        <Box sx={{ display: "flex", justifyContent: "flex-end", marginBottom: "25px" }}>

          <Button
            variant="contained"
            color="primary"
            onClick={() => alert('Redirecting to Add New Blog page...')}
            sx={{
              padding: '12px 25px',
              fontSize: '16px',
              borderRadius: '8px',
              marginRight: "12px",
              boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.3)',
              '&:hover': {
                backgroundColor: '#f2a800',
                boxShadow: '0px 6px 10px rgba(0, 0, 0, 0.4)',
              },
            }}
          >
            Add New Blog
          </Button>

          <Button
            variant="contained"
            color="primary"
            onClick={() => alert('Redirecting to Add New Blog page...')}
            sx={{
              padding: '12px 25px',
              fontSize: '16px',
              borderRadius: '8px',
              boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.3)',
              '&:hover': {
                backgroundColor: '#f2a800',
                boxShadow: '0px 6px 10px rgba(0, 0, 0, 0.4)',
              },
            }}
          >
            Upload Excel
          </Button>
        </Box>

        <Grid container spacing={4}>
          {blogData.length === 0 ? (
            <Typography variant="h6" align="center" fullWidth>
              Loading...
            </Typography>
          ) : (
            blogData.map((blog) => (
              <Grid item xs={12} sm={6} md={3} key={blog._id}>
                <Card
                  sx={{
                    cursor: 'pointer',
                    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                    '&:hover': { transform: 'scale(1.05)', boxShadow: '0 4px 20px rgba(242, 156, 30, 0.5)' },
                    backgroundColor: 'background.paper',
                    boxShadow: 3,
                    position: 'relative',
                    overflow: 'hidden',
                    '&:hover .icon-container': {
                      opacity: 1,
                    },
                  }}
                >
                  <CardMedia component="img" height="200" image={blog.banner} alt={blog.title} />
                  <CardContent>
                    <Typography variant="h6" noWrap color="text.primary">
                      {blog.client_name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" noWrap>
                      {blog.short_desc}
                    </Typography>
                  </CardContent>

                  <Box
                    className="icon-container"
                    sx={{
                      position: 'absolute',
                      top: '5px',
                      right: '10px',
                      opacity: 0,
                      transition: 'opacity 0.3s ease',
                    }}
                  >
                    <IconButton
                      color="primary"
                      sx={{ marginRight: '5px' }}
                      onClick={() => alert(`Read ${blog.title}`)}
                    >
                      <VisibilityIcon />
                    </IconButton>
                    <IconButton
                      color="primary"
                      sx={{ marginRight: '5px' }}
                      onClick={() => handleOpenModal(blog)} // Open edit modal
                    >
                      <EditIcon />
                    </IconButton>
                    <IconButton color="primary" onClick={() => handleDeleteBlog(blog._id)}>
                      <DeleteIcon />
                    </IconButton>
                  </Box>
                </Card>
              </Grid>
            ))
          )}
        </Grid>
      </Box>

      {/* Modal for Editing Blog */}
      <Modal open={open} onClose={handleCloseModal}>
  <Box sx={{
    padding: '20px',
    backgroundColor: 'background.default',
    borderRadius: '8px',
    maxWidth: '600px',
    margin: 'auto',
    border: "1px solid #f48d4c"
  }}>
    <Typography variant="h6" gutterBottom>Edit Blog</Typography>
    <form onSubmit={handleSubmit}>
      <TextField
        label="Title"
        name="title"
        fullWidth
        value={formData.title}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Client Name"
        name="client_name"
        fullWidth
        value={formData.client_name}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Short Description"
        name="short_desc"
        fullWidth
        value={formData.short_desc}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Category"
        name="category"
        fullWidth
        value={formData.category}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Author"
        name="author"
        fullWidth
        value={formData.author}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Banner Image URL"
        name="banner"
        fullWidth
        value={formData.banner}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Campaign Link"
        name="campaign_link"
        fullWidth
        value={formData.campaign_link}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <TextField
        label="Meta Keywords (comma separated)"
        name="meta_keyword"
        fullWidth
        value={formData.meta_keyword}
        onChange={handleInputChange}
        margin="normal"
        required
      />
      <FormControlLabel
        control={<Checkbox checked={formData.post_data} onChange={handleCheckboxChange} name="post_data" />}
        label="Post Data"
      />
      <FormControlLabel
        control={<Checkbox checked={formData.trending} onChange={handleCheckboxChange} name="trending" />}
        label="Trending"
      />

      {/* Add the TextField for 'all_data' */}
      <TextField
        label="Full Content (HTML)"
        name="all_data"
        fullWidth
        multiline
        rows={6}
        value={formData.all_data}
        onChange={handleInputChange}
        margin="normal"
        required
      />

      <Box sx={{ display: 'flex', justifyContent: 'space-between', marginTop: '20px' }}>
        <Button onClick={handleCloseModal} color="primary">
          Cancel
        </Button>
        <Button type="submit" variant="contained" color="primary" disabled={loading}>
          {loading ? <CircularProgress size={24} color="inherit" /> : 'Save Changes'}
        </Button>
      </Box>
    </form>
  </Box>
</Modal>


      {/* Snackbar for success/error messages */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        sx={{
          '& .MuiSnackbarContent-root': {
            backgroundColor: snackbarSeverity === 'success' ? '#2e7d32' : '#d32f2f',
            borderRadius: '8px',
            boxShadow: 3,
            fontWeight: 600,
          },
        }}
      >
        <Alert
          onClose={handleSnackbarClose}
          severity={snackbarSeverity}
          sx={{
            width: '100%',
            fontWeight: 600,
            padding: '10px',
            fontSize: '16px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </ThemeProvider>
  );
}

export default Blog;



